name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Check formatting and linting
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Set up Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: check-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features --workspace -- -D warnings

  # Build and test with multiple Rust versions
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - nightly
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: llvm-tools-preview

    - name: Set up Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: test-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev pkg-config libssl-dev

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Install cargo-nextest
      uses: taiki-e/install-action@nextest

    - name: Run tests with coverage
      run: cargo llvm-cov nextest --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: true

  # Build binaries for multiple architectures
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Set up Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cross
      uses: taiki-e/install-action@cross

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev pkg-config libssl-dev

    - name: Build API
      run: cross build --release --target ${{ matrix.target }} --bin emr-api

    - name: Build Web
      run: cross build --release --target ${{ matrix.target }} --bin emr-web

    - name: Build Jobs
      run: cross build --release --target ${{ matrix.target }} --bin emr-jobs

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.target }}
        path: |
          target/${{ matrix.target }}/release/emr-api
          target/${{ matrix.target }}/release/emr-web
          target/${{ matrix.target }}/release/emr-jobs

  # Security auditing
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Set up Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: audit-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-audit
      uses: taiki-e/install-action@cargo-audit

    - name: Run cargo audit
      run: cargo audit

    - name: Install cargo-deny
      uses: taiki-e/install-action@cargo-deny

    - name: Run cargo deny
      run: cargo deny check

  # Dependency licenses check
  licenses:
    name: License Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Set up Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: licenses-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-license
      run: cargo install cargo-license

    - name: Check licenses
      run: cargo license --json > licenses.json

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.json

  # Build and test Docker images
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [check, test]
    strategy:
      matrix:
        service: [api, web, jobs]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/emr-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: infra/dockerfiles/Dockerfile.${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Run integration tests with Docker Compose
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: emr_platform_test
          POSTGRES_USER: emr_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      nats:
        image: nats:2.10-alpine
        options: >-
          --health-cmd "nc -z localhost 4222"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 4222:4222

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Set up Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: integration-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev pkg-config libssl-dev curl

    - name: Install cargo-nextest
      uses: taiki-e/install-action@nextest

    - name: Run integration tests
      run: |
        export DATABASE_URL=postgresql://emr_user:test_password@localhost:5432/emr_platform_test
        export REDIS_URL=redis://localhost:6379
        export NATS_URL=nats://localhost:4222
        cargo nextest run --test-threads=1 --features=integration
      env:
        RUST_LOG: debug

    - name: Test API endpoints
      run: |
        # Start services in background
        cargo run --bin emr-api &
        API_PID=$!
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:8080/healthz || exit 1
        
        # Test FHIR endpoints
        curl -f http://localhost:8080/fhir/Patient || exit 1
        
        # Cleanup
        kill $API_PID
      env:
        DATABASE_URL: postgresql://emr_user:test_password@localhost:5432/emr_platform_test
        REDIS_URL: redis://localhost:6379
        NATS_URL: nats://localhost:4222

  # Performance benchmarks
  bench:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Set up Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev pkg-config libssl-dev

    - name: Run benchmarks
      run: cargo bench --workspace

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: target/criterion/ 