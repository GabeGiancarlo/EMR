version: '3.8'

# Docker Compose Override for Development Environment
# This file extends the main docker-compose.yml with development-specific configurations

services:
  # Development container
  dev:
    image: mcr.microsoft.com/devcontainers/rust:1-1-bullseye
    container_name: emr-dev
    restart: unless-stopped
    volumes:
      - ..:/workspace:cached
      - emr-cargo-cache:/usr/local/cargo/registry
      - emr-target-cache:/tmp/target
    working_dir: /workspace
    command: sleep infinity
    networks:
      - emr-network
    environment:
      - RUST_LOG=debug
      - RUST_BACKTRACE=1
      - DATABASE_URL=postgresql://emr_user:${DB_PASSWORD:-emr_secure_password_change_in_prod}@postgres:5432/emr_platform
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
      - NATS_URL=nats://nats:4222
      - CARGO_TARGET_DIR=/tmp/target
      - DEVELOPMENT_MODE=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy

  # Override postgres for development
  postgres:
    environment:
      - POSTGRES_DB=emr_platform
      - POSTGRES_USER=emr_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-emr_secure_password_change_in_prod}
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ../infra/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]

  # Override redis for development
  redis:
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password} --loglevel verbose

  # Override nats for development
  nats:
    ports:
      - "4222:4222"
      - "8222:8222"
    volumes:
      - nats_dev_data:/data
    command: ["--jetstream", "--store_dir=/data", "--max_file_store=1GB", "--debug"]

  # Hot-reload API server for development
  api-dev:
    build:
      context: ..
      dockerfile: infra/dockerfiles/Dockerfile.api
      target: deps
    container_name: emr-api-dev
    restart: unless-stopped
    volumes:
      - ..:/workspace:cached
      - emr-cargo-cache:/usr/local/cargo/registry
      - emr-target-cache:/tmp/target
    working_dir: /workspace
    command: ["cargo", "watch", "-x", "run --bin emr-api"]
    ports:
      - "8080:8080"
      - "8443:8443"
    networks:
      - emr-network
    environment:
      - RUST_LOG=debug,emr_api=trace
      - RUST_BACKTRACE=1
      - DATABASE_URL=postgresql://emr_user:${DB_PASSWORD:-emr_secure_password_change_in_prod}@postgres:5432/emr_platform
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
      - NATS_URL=nats://nats:4222
      - HOST=0.0.0.0
      - PORT=8080
      - DEVELOPMENT_MODE=true
      - CARGO_TARGET_DIR=/tmp/target
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    profiles:
      - dev

  # Hot-reload Web server for development
  web-dev:
    build:
      context: ..
      dockerfile: infra/dockerfiles/Dockerfile.web
      target: deps
    container_name: emr-web-dev
    restart: unless-stopped
    volumes:
      - ..:/workspace:cached
      - emr-cargo-cache:/usr/local/cargo/registry
      - emr-target-cache:/tmp/target
    working_dir: /workspace
    command: ["cargo", "watch", "-x", "run --bin emr-web"]
    ports:
      - "3000:3000"
    networks:
      - emr-network
    environment:
      - RUST_LOG=debug,emr_web=trace
      - RUST_BACKTRACE=1
      - WEB_API_BASE_URL=http://api-dev:8080
      - WEB_SERVER_HOST=0.0.0.0
      - WEB_SERVER_PORT=3000
      - DEVELOPMENT_MODE=true
      - CARGO_TARGET_DIR=/tmp/target
    depends_on:
      - api-dev
    profiles:
      - dev

  # Hot-reload Jobs worker for development
  jobs-dev:
    build:
      context: ..
      dockerfile: infra/dockerfiles/Dockerfile.jobs
      target: deps
    container_name: emr-jobs-dev
    restart: unless-stopped
    volumes:
      - ..:/workspace:cached
      - emr-cargo-cache:/usr/local/cargo/registry
      - emr-target-cache:/tmp/target
    working_dir: /workspace
    command: ["cargo", "watch", "-x", "run --bin emr-jobs"]
    ports:
      - "9090:9090"
    networks:
      - emr-network
    environment:
      - RUST_LOG=debug,emr_jobs=trace
      - RUST_BACKTRACE=1
      - JOBS_DATABASE_URL=postgresql://emr_user:${DB_PASSWORD:-emr_secure_password_change_in_prod}@postgres:5432/emr_platform
      - JOBS_REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
      - JOBS_WORKER_MAX_WORKERS=2
      - JOBS_WORKER_POLL_INTERVAL=1
      - DEVELOPMENT_MODE=true
      - CARGO_TARGET_DIR=/tmp/target
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - dev

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: emr-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@emr.local
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_LISTEN_PORT=80
    ports:
      - "5050:80"
    networks:
      - emr-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    profiles:
      - dev
      - tools

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: emr-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=emr-redis:redis:6379:0:${REDIS_PASSWORD:-redis_secure_password}
    ports:
      - "8081:8081"
    networks:
      - emr-network
    depends_on:
      - redis
    profiles:
      - dev
      - tools

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: emr-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - emr-network
    profiles:
      - dev
      - tools

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: emr-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Web UI
      - "14268:14268"  # HTTP collector
    networks:
      - emr-network
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    profiles:
      - dev
      - monitoring

  # Prometheus for metrics (development override)
  prometheus:
    ports:
      - "9091:9090"
    volumes:
      - ../infra/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_dev_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--log.level=debug'
    profiles:
      - dev
      - monitoring

  # Grafana for dashboards (development override)
  grafana:
    ports:
      - "3001:3000"
    volumes:
      - grafana_dev_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_LOG_LEVEL=debug
    profiles:
      - dev
      - monitoring

# Development-specific volumes
volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  nats_dev_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_dev_data:
    driver: local
  grafana_dev_data:
    driver: local
  emr-cargo-cache:
    driver: local
  emr-target-cache:
    driver: local 