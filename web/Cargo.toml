[package]
name = "emr-web"
version.workspace = true
edition.workspace = true
rust-version.workspace = true
authors.workspace = true
license.workspace = true
repository.workspace = true

[lib]
crate-type = ["cdylib"]

[dependencies]
# Workspace dependencies
core = { path = "../core" }
api = { path = "../api" }

# Leptos
leptos = { workspace = true, features = ["csr", "hydrate", "ssr"] }
leptos_meta = { workspace = true }
leptos_router = { workspace = true }
leptos_axum = { workspace = true, optional = true }

# Axum (server-side)
axum = { workspace = true, optional = true }
tower = { workspace = true, optional = true }
tower-http = { workspace = true, optional = true }

# WASM
wasm-bindgen = { workspace = true }
console_error_panic_hook = { workspace = true }

# Async runtime
tokio = { workspace = true, features = ["rt-multi-thread", "macros"], optional = true }

# Serialization
serde = { workspace = true }
serde_json = { workspace = true }

# HTTP client
reqwest = { workspace = true, features = ["json"] }

# Logging
tracing = { workspace = true }
tracing-subscriber = { workspace = true, optional = true }

# Configuration
config = { workspace = true, optional = true }
dotenvy = { workspace = true, optional = true }

# Utilities
uuid = { workspace = true }
chrono = { workspace = true }

# CSS framework integration
web-sys = "0.3"
js-sys = "0.3"

# Regex for validation
regex = "1.10"

# URL encoding
urlencoding = { workspace = true }

[features]
hydrate = ["leptos/hydrate", "leptos_meta/hydrate", "leptos_router/hydrate"]
ssr = [
    "dep:axum",
    "dep:tower",
    "dep:tower-http",
    "dep:tokio",
    "dep:tracing-subscriber",
    "dep:config",
    "dep:dotenvy",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    "leptos_axum/default",
]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-pack/trunk for the JS generated from your name
output-name = "emr_web"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it only for generated content.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg-dir>/app.css
style-file = "style/main.scss"

# Assets source dir. These files are copied as-is to the site-root, so assets placed here can be referenced with a relative path and <site-root> as the root.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server should be served
# Optional, Defaults to 127.0.0.1:3000
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release" 